{"version":3,"file":"UserLogin.js","sourceRoot":"","sources":["../../../src/components/UserLogin.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC,CAAC,yCAAyC;AACtF,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC,CAAC,iDAAiD;AAC9G,OAAO,EAAE,WAAW,EAAE,MAAM,4BAA4B,CAAC,CAAC,wDAAwD;AAG3G,IAAM,SAAS,GAAf,MAAM,SAAU,SAAQ,UAAU;IAAlC;;QACL,gDAAgD;QACpB,aAAQ,GAAG,EAAE,CAAC;QAEd,aAAQ,GAAG,EAAE,CAAC;IAmG5C,CAAC;IA/CC,mFAAmF;IACnF,iBAAiB;QACf,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,WAAW,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAChF,CAAC;IAED,wDAAwD;IAChD,iBAAiB,CAAC,CAAQ;QAChC,MAAM,MAAM,GAAG,CAAC,CAAC,MAA0B,CAAC;QAC5C,IAAI,CAAC,MAAM,CAAC,IAA+B,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC;IAC9D,CAAC;IAED,oCAAoC;IAC5B,KAAK;QACX,WAAW,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC1E,CAAC;IAED,yCAAyC;IACjC,gBAAgB;QACtB,KAAK,CAAC,iDAAiD,CAAC,CAAC;IAC3D,CAAC;IAED,2BAA2B;IAC3B,MAAM;QACJ,OAAO,IAAI,CAAA;;;;;;;iBAOE,IAAI,CAAC,QAAQ;iBACb,IAAI,CAAC,iBAAiB;;;;;;;;iBAQtB,IAAI,CAAC,QAAQ;iBACb,IAAI,CAAC,iBAAiB;;;uBAGhB,IAAI,CAAC,KAAK;KAC5B,CAAC;IACJ,CAAC;;AAhGD,0CAA0C;AACnC,gBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+ClB,AA/CY,CA+CX;AApD0B;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;2CAAe;AAEd;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;2CAAe;AAJ/B,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC,CAAC,iDAAiD;GACjE,SAAS,CAuGrB","sourcesContent":["import { LitElement, html, css } from 'lit'; // Importing necessary LitElement modules\nimport { customElement, property } from 'lit/decorators.js'; // Importing decorators to define custom elements\nimport { authService } from '../services/AuthService.js'; // Importing the authService for handling authentication\n\n@customElement('user-login') // Defining the custom element named 'user-login'\nexport class UserLogin extends LitElement {\n  // Defining properties for username and password\n  @property({ type: String }) username = '';\n\n  @property({ type: String }) password = '';\n\n  // Defining styles for the login component\n  static styles = css`\n    :host {\n      display: block;\n      padding: 20px;\n      max-width: 500px;\n      margin: auto;\n      background-color: #f7f7f7;\n      border-radius: 8px;\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n\n    h2 {\n      margin-bottom: 40px;\n      font-size: 1.5em;\n      color: #333;\n    }\n\n    input[type='text'],\n    input[type='password'] {\n      width: 470px;\n      padding: 6px;\n      margin-bottom: 20px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      font-size: 1em;\n    }\n\n    button {\n      width: 490px;\n      padding: 10px;\n      background-color: #002147;\n      color: white;\n      border: none;\n      border-radius: 4px;\n      font-size: 1em;\n      cursor: pointer;\n      margin-top: 10px;\n    }\n\n    button:hover {\n      background-color: #003366;\n    }\n\n    .error {\n      color: red;\n      margin-bottom: 20px;\n    }\n  `;\n\n  // When the element is first connected to the DOM, listen for the auth-failed event\n  connectedCallback() {\n    super.connectedCallback();\n    authService.addEventListener('auth-failed', this.handleAuthFailed.bind(this));\n  }\n\n  // Handling input changes for both username and password\n  private handleInputChange(e: Event) {\n    const target = e.target as HTMLInputElement;\n    this[target.name as 'username' | 'password'] = target.value;\n  }\n\n  // Method to handle the login action\n  private login() {\n    authService.login({ username: this.username, password: this.password });\n  }\n\n  // Method to handle failed login attempts\n  private handleAuthFailed() {\n    alert('Invalid username or password. Please try again.');\n  }\n\n  // Rendering the login form\n  render() {\n    return html`\n      <h2>Login</h2>\n      <input\n        type=\"text\"\n        id=\"username\"\n        name=\"username\"\n        placeholder=\"Username\"\n        .value=${this.username}\n        @input=${this.handleInputChange}\n      />\n\n      <input\n        type=\"password\"\n        id=\"password\"\n        name=\"password\"\n        placeholder=\"Password\"\n        .value=${this.password}\n        @input=${this.handleInputChange}\n      />\n\n      <button @click=${this.login}>Login</button>\n    `;\n  }\n}\n\n// Declaring the custom element globally\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'user-login': UserLogin;\n  }\n}\n"]}