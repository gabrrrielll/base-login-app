{"version":3,"file":"singleton-manager.js","sourceRoot":"","sources":["../../../src/services/singleton-manager.ts"],"names":[],"mappings":"AAAA,MAAM,gBAAgB;IAIpB,+GAA+G;IAC/G,MAAM,CAAC,WAAW,CAAI,QAAqB;QACzC,yCAAyC;QACzC,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC;QAEhC,gEAAgE;QAChE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;YACnC,sEAAsE;YACtE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,QAAQ,EAAE,CAAC,CAAC;QAChD,CAAC;QAED,8DAA8D;QAC9D,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC;IAED,+HAA+H;IAC/H,MAAM,CAAC,aAAa,CAAC,QAAuB;QAC1C,yCAAyC;QACzC,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC;QAEhC,iDAAiD;QACjD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;;AAzBD,+HAA+H;AAChH,0BAAS,GAAqB,IAAI,GAAG,EAAE,CAAC;AA2BzD,0EAA0E;AAC1E,eAAe,gBAAgB,CAAC","sourcesContent":["class SingletonManager {\n  // A static map to hold instances of different classes. The key is the class name, and the value is the instance of that class.\n  private static instances: Map<string, any> = new Map();\n\n  // A static method to get the singleton instance of a class. The method takes a class reference as an argument.\n  static getInstance<T>(ClassRef: new () => T): T {\n    // Get the class name from the reference.\n    const className = ClassRef.name;\n\n    // Check if an instance of this class already exists in the map.\n    if (!this.instances.has(className)) {\n      // If it doesn't exist, create a new instance and store it in the map.\n      this.instances.set(className, new ClassRef());\n    }\n\n    // Return the existing or newly created instance from the map.\n    return this.instances.get(className);\n  }\n\n  // A static method to clear the singleton instance of a class. This method is useful for resetting the state or during testing.\n  static clearInstance(ClassRef: new () => any): void {\n    // Get the class name from the reference.\n    const className = ClassRef.name;\n\n    // Remove the instance of the class from the map.\n    this.instances.delete(className);\n  }\n}\n\n// Export the SingletonManager class as the default export of this module.\nexport default SingletonManager;\n"]}