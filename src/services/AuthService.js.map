{"version":3,"file":"AuthService.js","sourceRoot":"","sources":["../../../src/services/AuthService.ts"],"names":[],"mappings":"AAAA,OAAO,gBAAgB,MAAM,wBAAwB,CAAC;AAEtD,oDAAoD;AACpD,4EAA4E;AAC5E,MAAM,OAAO,WAAY,SAAQ,WAAW;IAA5C;;QAEE,2FAA2F;QACnF,qBAAgB,GAAY,KAAK,CAAC;QAE1C,6EAA6E;QACrE,iBAAY,GAAkD,IAAI,CAAC;IAqD7E,CAAC;IAnDC,8CAA8C;IACvC,KAAK,CAAC,WAAmD;QAE9D,uCAAuC;QACvC,MAAM,aAAa,GAAG,UAAU,CAAC;QACjC,MAAM,aAAa,GAAG,UAAU,CAAC;QAEjC,kCAAkC;QAClC,IAAI,WAAW,CAAC,QAAQ,KAAK,aAAa,IAAI,WAAW,CAAC,QAAQ,KAAK,aAAa,EAAE,CAAC;YACrF,wCAAwC;YACxC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC7B,kCAAkC;YAClC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;YAChC,wEAAwE;YACxE,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;QAChD,CAAC;aAAM,CAAC;YACN,8DAA8D;YAC9D,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;IAED,+CAA+C;IACxC,MAAM;QACX,yCAAyC;QACzC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,gCAAgC;QAChC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,wEAAwE;QACxE,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;IAChD,CAAC;IAED,+DAA+D;IAC/D,IAAW,eAAe;QACxB,2CAA2C;QAC3C,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED,kDAAkD;IAClD,IAAW,QAAQ;QACjB,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC1B,yEAAyE;YACzE,OAAO;gBACL,IAAI,EAAE,UAAU;gBAChB,KAAK,EAAE,sBAAsB;gBAC7B,KAAK,EAAE,iBAAiB;aACzB,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO,IAAI,CAAC;QACd,CAAC;IAEH,CAAC;CACF;AAED,oEAAoE;AACpE,MAAM,CAAC,MAAM,WAAW,GAAG,gBAAgB,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC","sourcesContent":["import SingletonManager from './singleton-manager.js';\n\n// Singleton class for managing user authentication.\n// Provides methods for logging in, logging out, and accessing user details.\nexport class AuthService extends EventTarget {\n\n  // Initialize a private property to track the authentication status, initially set to false\n  private _isAuthenticated: boolean = false;\n\n  // Initialize a private property to store user details, initially set to null\n  private _userDetails: { username: string; password: string } | null = null;\n\n  // Define a public method to handle user login\n  public login(userDetails: { username: string; password: string }) {\n\n    // Hardcoded credentials for comparison\n    const validUsername = 'username';\n    const validPassword = 'password';\n\n    // Verify the provided credentials\n    if (userDetails.username === validUsername && userDetails.password === validPassword) {\n      // Set the authentication status to true\n      this._isAuthenticated = true;\n      // Store the provided user details\n      this._userDetails = userDetails;\n      // Dispatch an event to notify about the change in authentication status\n      this.dispatchEvent(new Event('auth-changed'));\n    } else {\n      // Dispatch an event to notify about the failed authentication\n      this.dispatchEvent(new Event('auth-failed'));\n    }\n  }\n\n  // Define a public method to handle user logout\n  public logout() {\n    // Set the authentication status to false\n    this._isAuthenticated = false;\n    // Clear the stored user details\n    this._userDetails = null;\n    // Dispatch an event to notify about the change in authentication status\n    this.dispatchEvent(new Event('auth-changed'));\n  }\n\n  // Define a public getter to retrieve the authentication status\n  public get isAuthenticated(): boolean {\n    // Return the current authentication status\n    return this._isAuthenticated;\n  }\n\n  // Define a public getter to retrieve user details\n  public get userData() {\n    if (this._isAuthenticated) {\n      // Return the hardcoded user details if the authentication status is true\n      return {\n        name: 'John Doe',\n        email: 'john.doe@example.com',\n        phone: '+1 555-555-5555'\n      };\n    } else {\n      return null;\n    }\n\n  }\n}\n\n// Use SingletonManager to get the singleton instance of AuthService\nexport const authService = SingletonManager.getInstance(AuthService);\n"]}