{"version":3,"file":"user-login.test.js","sourceRoot":"","sources":["../../test/user-login.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { fixture, html } from '@open-wc/testing'; // Importing testing utilities\nimport { expect } from '@esm-bundle/chai'; // Importing Chai assertion library\nimport { UserLogin } from '../src/components/UserLogin.js'; // Import the UserLogin component\nimport { authService } from '../src/services/AuthService.js'; // Import authService to control authentication\n\ndescribe('UserLogin', () => {\n  // Set up the environment before each test\n  beforeEach(() => {\n    // Ensure the user is not authenticated before rendering the component\n    authService.logout(); // This should set isAuthenticated to false\n  });\n\n  // Test to check if the component renders correctly\n  it('should render the form with input fields and a button', async () => {\n    const el = await fixture<UserLogin>(html` <user-login></user-login>`); // Creating an instance of the component\n\n    await el.updateComplete; // Wait for the element to render fully\n\n    // Check if shadowRoot is not null\n    if (el.shadowRoot) {\n      // Check if the username input exists\n      const usernameInput = el.shadowRoot?.querySelector(\n        'input[name=\"username\"]',\n      );\n      expect(usernameInput).to.exist;\n      await expect(usernameInput?.getAttribute('type')).to.equal('text');\n\n      // Check if the password input exists\n      const passwordInput = el.shadowRoot?.querySelector(\n        'input[name=\"password\"]',\n      );\n      expect(passwordInput).to.exist;\n      await expect(passwordInput?.getAttribute('type')).to.equal('password');\n\n      // Check if the button exists\n      const button = el.shadowRoot?.querySelector('button');\n      expect(button).to.exist;\n      await expect(button?.textContent?.trim()).to.equal('Login');\n    }\n  });\n\n  // Test to check if username and password properties are updated correctly\n  it('should update username and password properties when inputs change', async () => {\n    const el = await fixture<UserLogin>(html` <user-login></user-login>`); // Creating an instance of the component\n\n    await el.updateComplete; // Wait for the element to render fully\n    if (el.shadowRoot) {\n      const usernameInput = el.shadowRoot?.querySelector(\n        'input[name=\"username\"]',\n      ) as HTMLInputElement;\n      const passwordInput = el.shadowRoot?.querySelector(\n        'input[name=\"password\"]',\n      ) as HTMLInputElement;\n\n      // Simulate input for username\n      usernameInput.value = 'testuser';\n      usernameInput.dispatchEvent(\n        new Event('input', { bubbles: true, composed: true }),\n      );\n      await expect(el.username).to.equal('testuser');\n\n      // Simulate input for password\n      passwordInput.value = 'testpassword';\n      passwordInput.dispatchEvent(\n        new Event('input', { bubbles: true, composed: true }),\n      );\n      await expect(el.password).to.equal('testpassword');\n    }\n  });\n});\n"]}