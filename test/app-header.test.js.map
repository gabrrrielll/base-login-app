{"version":3,"file":"app-header.test.js","sourceRoot":"","sources":["../../test/app-header.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC,CAAC,8BAA8B;AAChF,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC,CAAC,mCAAmC;AAG9E,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;IACzB,mDAAmD;IACnD,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,EAAE,GAAG,MAAM,OAAO,CAAY,IAAI,CAAA;gCACZ,CAAC,CAAC,CAAC,wCAAwC;QAEvE,+CAA+C;QAC/C,MAAM,SAAS,GAAG,EAAE,CAAC,UAAU,IAAI,EAAE,CAAC,UAAU,EAAE,aAAa,CAAC,WAAW,CAAC,EAAE,WAAW,CAAC;QAC1F,SAAS,IAAI,MAAM,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH,kDAAkD;IAClD,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,MAAM,EAAE,GAAG,MAAM,OAAO,CAAY,IAAI,CAAA;gCACZ,CAAC,CAAC,CAAC,wCAAwC;QAEvE,qDAAqD;QACrD,MAAM,OAAO,GAAG,EAAE,CAAC,UAAU,IAAI,EAAE,CAAC,UAAU,EAAE,aAAa,CAAC,WAAW,CAAC,CAAC;QAC3E,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;QACpC,OAAO,IAAI,MAAM,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,kCAAkC,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;IACpI,CAAC,CAAC,CAAC;IAEH,wCAAwC;IACxC,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,EAAE,GAAG,MAAM,OAAO,CAAY,IAAI,CAAA;gCACZ,CAAC,CAAC,CAAC,wCAAwC;QAEvE,2CAA2C;QAC3C,MAAM,MAAM,GAAG,gBAAgB,CAAC,EAAE,CAAC,CAAC;QACpC,MAAM,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,6CAA6C;IAC7C,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;QAClD,MAAM,EAAE,GAAG,MAAM,OAAO,CAAY,IAAI,CAAA;gCACZ,CAAC,CAAC,CAAC,wCAAwC;QAEvE,qCAAqC;QACrC,MAAM,MAAM,GAAG,gBAAgB,CAAC,EAAE,CAAC,CAAC;QACpC,MAAM,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,8BAA8B;IACrF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { fixture, html } from '@open-wc/testing'; // Importing testing utilities\nimport { expect } from '@esm-bundle/chai'; // Importing Chai assertion library\nimport { AppHeader } from '../src/components/AppHeader.js'; // Import the AppHeader component\n\ndescribe('AppHeader', () => {\n  // Test to check if the component renders correctly\n  it('should render the header with correct title', async () => {\n    const el = await fixture<AppHeader>(html`\n      <app-header></app-header>`); // Creating an instance of the component\n\n    // Check if the title contains the correct text\n    const titleText = el.shadowRoot && el.shadowRoot?.querySelector('.title h2')?.textContent;\n    titleText && await expect(titleText).to.be.equal('Base Login App');\n  });\n\n  // Test to check if the logo is rendered correctly\n  it('should render the logo with correct src', async () => {\n    const el = await fixture<AppHeader>(html`\n      <app-header></app-header>`); // Creating an instance of the component\n\n    // Check if the logo is rendered with the correct src\n    const logoImg = el.shadowRoot && el.shadowRoot?.querySelector('.logo img');\n    logoImg && expect(logoImg).to.exist;\n    logoImg && await expect(logoImg?.getAttribute('src')).to.equal(new URL('../../../assets/open-wc-logo.svg', import.meta.url).href);\n  });\n\n  // Test to check the style of the header\n  it('should have the correct background color', async () => {\n    const el = await fixture<AppHeader>(html`\n      <app-header></app-header>`); // Creating an instance of the component\n\n    // Check if the background color is correct\n    const styles = getComputedStyle(el);\n    await expect(styles.backgroundColor).to.equal('rgba(0, 0, 0, 0)');\n  });\n\n  // Test to check the text color of the header\n  it('should have the correct text color', async () => {\n    const el = await fixture<AppHeader>(html`\n      <app-header></app-header>`); // Creating an instance of the component\n\n    // Check if the text color is correct\n    const styles = getComputedStyle(el);\n    await expect(styles.color).to.equal('rgb(0, 0, 0)'); // RGB equivalent of (#000000)\n  });\n});\n"]}